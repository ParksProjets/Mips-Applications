#!/usr/bin/python3
"""

Convert a font file (TTF) into an ASM file.

Copyright (C) 2018, Guillaume Gonnet
License MIT

"""

import argparse
import configparser
import os.path as path
from math import ceil, floor, log2
from PIL import Image, ImageDraw, ImageFont


# Character set
CHAR_SET = (
    " \"'-_+*/()."
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "0123456789"
)


def gray8to1(color):
    "Convert a 8 bits gray color to 1 bit."

    return int(color < 128)



def convert_char(image, draw, maxwidth, width, height, offset, char):
    "Convert a single character."

    draw.rectangle((0, 0, 50, 50), 0xFF)
    draw.text((0, -offset), char)

    assert width <= maxwidth, "Character '%s' too large (%dpx)" % (char, width)
    pixels = [0] * ceil(height / 4)

    for y in range(height):
        gsh = (8 * (y % 4))
        pixels[y // 4] |= ((1 << width) << gsh)

        for x in range(width):
            px = gray8to1(image.getpixel((x, y)))
            pixels[y // 4] |= ((px << x) << gsh)

    return pixels



def save_asm(config, font, index, outname):
    "Save the font into an ASM .s file."

    out = open(outname, "w")
    out.write("# Converted using font2asm.py\n")
    out.write("# Font name: %s\n\n" % "-".join(font.getname()))

    image = Image.new("L", (50, 50), None)

    assert "maxwidth" in config, "Please provide 'maxwidth' in config file"

    maxwidth = config.getint("maxwidth")
    height = config.getint("height", font.getmetrics()[0])
    offset = config.getint("offset", 0)

    draw = ImageDraw.Draw(image)
    draw.font = font

    words = []

    for char in CHAR_SET:
        size = font.getsize(char)[0] if char != " " else 5
        words += convert_char(image, draw, maxwidth, size - 1, height, offset, char)

    out.write(".section .zdata\n\n")
    out.write(".set kFontIndexLength, %d\n" % index)
    out.write(".set kNumberCharsPerWord, %d\n\n" % floor(32 / index))
    out.write("font: .word %s\n" % ", ".join(["0x%08X" % w for w in words]))

    out.close()



def save_charset(font, index, outname):
    "Save the charset into a .py file."

    out = open(outname, "w")
    out.write("# Charset generated by font2asm.py\n")
    out.write("# Font name: %s\n\n" % "-".join(font.getname()))

    out.write("INDEX_LENGTH = %d\n\n" % index)
    array = []

    for char in CHAR_SET:
        size = (font.getsize(char)[0] - 1)
        array.append("    ('%s', %d)" % (char.replace("'", "\\'"), size))

    out.write("CHAR_SET = [\n%s\n]\n" % ",\n".join(array))
    out.close()



def save_debug_img(config, font):
    "Save the charset as a PNG image."

    width = 1 + config.getint("maxwidth")
    height = 2 + config.getint("height", font.getmetrics()[0])
    offset = config.getint("offset", 0)

    image = Image.new("L", (1 + width * len(CHAR_SET), height), 0xFF)
    draw = ImageDraw.Draw(image)

    for i, char in enumerate(CHAR_SET):
        draw.text((1 + width * i, 1 - offset), char, font=font)

    image.save("charset.png")



def font2asm(config, debug, asmname, pyname):
    "Convert a font file (TTF) into an ASM file."

    assert "file" in config, "Please provide 'file' in config file"
    assert "size" in config, "Please provide 'size' in config file"

    here = path.dirname(__file__)
    fontname = path.abspath(path.join(here, config.get("file")))

    index = config.getint("index-length", ceil(log2(len(CHAR_SET))))
    font = ImageFont.truetype(fontname, config.getint("size"))

    save_charset(font, index, pyname)
    save_asm(config, font, index, asmname)

    if debug:
        save_debug_img(config, font)



def main():
    "Entry point of the application."

    parser = argparse.ArgumentParser(prog="font2asm",
        description="Convert a font file (TTF) to an ASM file.")

    parser.add_argument("config", default="font.ini", nargs="?",
        help="font configuration file (default=font.ini)")

    parser.add_argument("-d", action="store_true",
        help="debug: save charset in a PNG")

    args = parser.parse_args()
    here = path.dirname(__file__)

    config = configparser.ConfigParser()
    configf = path.abspath(path.join(here, args.config))

    with open(configf) as file:
        config.read_string("[DEFAULT]\n%s" % file.read())

    asmname = path.abspath(path.join(here, "../../src/text/font-data.s"))
    pyname = path.abspath(path.join(here, "../text/charset.py"))
    font2asm(config["DEFAULT"], args.d, asmname, pyname)


if __name__ == "__main__":
    main()
