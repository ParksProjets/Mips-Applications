#!/usr/bin/python3
"""

Convert a font file (TTF) into an ASM file.

Copyright (C) 2018, Guillaume Gonnet
License MIT

"""

import argparse
import configparser
from math import ceil, log2
from PIL import Image, ImageDraw, ImageFont


# Character set
CHAR_SET = " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"


def gray8to1(color):
    "Convert a 8 bits gray color to 1 bit."

    return color > (255 / 2)



def convert_char(image, draw, maxwidth, width, height, offset, char):
    "Convert a single character."

    draw.rectangle((0, 0, 50, 50), 0xFF)
    draw.text((0, -offset), char)

    assert width <= maxwidth, "Character '%s' too large (%dpx)" % (char, width)
    pixels = [0] * ceil(height / 4)

    for y in range(height):
        gsh = (8 * (y % 4))
        pixels[y // 4] |= ((1 << maxwidth) << gsh)

        for x in range(width):
            px = gray8to1(image.getpixel((x, y)))
            pixels[y // 4] |= ((px << x) << gsh)

    return pixels



def save_asm(config, font, index, outname):
    "Save the font into an ASM .s file."

    out = open(outname, "w")
    out.write("# Converted using font2asm.py\n")
    out.write("# Font name: %s\n\n" % "-".join(font.getname()))

    image = Image.new("L", (50, 50), None)

    assert "maxwidth" in config, "Please provide 'maxwidth' in config file"

    maxwidth = config.getint("maxwidth")
    height = config.getint("height", fallback=font.getmetrics()[0])
    offset = config.getint("offset", fallback=0)

    draw = ImageDraw.Draw(image)
    draw.font = font

    words = []

    for char in CHAR_SET:
        size = font.getsize(char)
        words += convert_char(image, draw, maxwidth, size[0] - 1, height, offset, char)

    out.write(".data\n\n")
    out.write(".set kFontIndexLength, %d\n\n" % index)
    out.write("font: .word %s\n" % ", ".join(["0x%08X" % w for w in words]))

    out.close()



def save_charset(font, index, outname):
    "Save the charset into a .py file."

    out = open(outname, "w")
    out.write("# Charset generated by font2asm.py\n")
    out.write("# Font name: %s\n\n" % "-".join(font.getname()))

    out.write("INDEX_LENGTH = %d\n\n" % index)
    array = []

    for char in CHAR_SET:
        size = font.getsize(char)
        array.append("    ('%s', %d)" % (char, size[0] - 1))

    out.write("CHAR_SET = [\n%s\n]\n" % ",\n".join(array))
    out.close()



def save_debug_img(config, font):
    "Save the charset as a PNG image."

    width = 1 + config.getint("maxwidth")
    height = 2 + config.getint("height", fallback=font.getmetrics()[0])
    offset = config.getint("offset", fallback=0)

    image = Image.new("L", (1 + width * len(CHAR_SET), height), 0xFF)
    draw = ImageDraw.Draw(image)

    for i, char in enumerate(CHAR_SET):
        draw.text((1 + width * i, 1 - offset), char, font=font)

    image.save("charset.png")



def font2asm(config, debug, index, asmname, pyname):
    "Convert a font file (TTF) into an ASM file."

    assert "file" in config, "Please provide 'file' in config file"
    assert "size" in config, "Please provide 'size' in config file"

    font = ImageFont.truetype(config.get("file"), config.getint("size"))

    save_charset(font, index, pyname)
    save_asm(config, font, index, asmname)

    if debug:
        save_debug_img(config, font)



def main():
    "Entry point of the application."

    parser = argparse.ArgumentParser(prog="font2asm",
        description="Convert a font file (TTF) to an ASM file.")

    parser.add_argument("config", default="font.ini", nargs="?",
        help="font configuration file (default=font.ini)")

    parser.add_argument("-d", action="store_true",
        help="debug: save charset in a PNG")

    parser.add_argument("-i", type=int, metavar="bits", default=0,
        help="number of bits for the index (default=min)")

    args = parser.parse_args()

    config = configparser.ConfigParser()
    with open(args.config) as file:
        config.read_string("[DEFAULT]\n%s" % file.read())

    if not args.i:
        args.i = ceil(log2(len(CHAR_SET)))

    font2asm(config["DEFAULT"], args.d, args.i, "../../src/font.s", "../text/charset.py")


if __name__ == "__main__":
    main()
