#!/usr/bin/python3
"""

Convert the app list into an ASM file.

Copyright (C) 2018, Guillaume Gonnet
License MIT

"""

import os.path as path
import sys
import argparse
import configparser
import re


# Push 'text' folder for loading 'text2asm'
folder = path.join(path.dirname(__file__), '..', 'text')
sys.path.append(path.abspath(folder))

from text2asm import convert_text


def read_ini(filename):
    "Read an INI file."

    config = configparser.ConfigParser()
    with open(filename) as file:
        config.read_string("[DEFAULT]\n%s" % file.read())

    return config["DEFAULT"]



def convert_app(out, infolder, name):
    "Convert a single app to ASM code."

    config = read_ini("%s/%s.ini" % (infolder, name))
    uppname = re.sub("[ _-]+([a-z0-9])", lambda m: m.group(1).upper(),
        name.title(), 0, re.I)

    assert "title" in config, "Please provide 'title' in %s.ini" % name

    data = convert_text(config.get("title").strip())
    dstr = ", ".join("0x%08X" % w for w in data)

    out.write("k%sTitle: .word %s\n" % (uppname, dstr))

    entname = re.sub("[ -]", "_", name)
    return ("k%sTitle" % uppname, "__%s_main" % entname)



def apps2asm(infolder, outname):
    "Convert the app list into an ASM file."

    out = open(outname, "w")
    out.write("# Generated by apps2asm.py\n\n")
    out.write(".section .zdata\n\n")

    assert path.isfile(infolder + "/#all-apps.ini"), "File #all-apps.ini is missing"
    config = read_ini(infolder + "/#all-apps.ini")

    apps = re.findall("^\s*-\s*(.*)$", config.get("apps").strip(), re.M)
    out.write(".set kNumberOfApps, %d\n\n" % len(apps))

    texts, entries = ([], [])
    for name in apps:
        text, entry = convert_app(out, infolder, name)
        texts.append(text)
        entries.append(entry)

    entries += ["lock_system", "blue_screen"]

    out.write("\nkAppTexts: .word %s\n" % ", ".join(reversed(texts)))
    out.write("kAppEntries: .word %s\n" % ", ".join(entries))
    out.close()



def main():
    "Entry point of the application."

    parser = argparse.ArgumentParser(prog="apps2asm",
        description="Convert the app list into an ASM file.")

    parser.add_argument("folder", default="apps", nargs="?",
        help="folder containing the apps, from root (default=apps)")

    args = parser.parse_args()
    here = path.dirname(__file__)

    infolder = path.abspath(path.join(here, "../../", args.folder))
    outname = path.abspath(path.join(here, "../../src/menu/apps-data.s"))
    apps2asm(infolder, outname)


if __name__ == "__main__":
    main()
